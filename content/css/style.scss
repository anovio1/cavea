$highlight: #00a5db;


@keyframes close_navMenu{
    0%{opacity: 1; visibility:visible;height:100%}
    70%{visibility:visible;}
    99%{visibility:hidden;}
    100% { opacity: 0;height: 0;visibility:hidden;}
  }
@keyframes open_navMenu{
    0%{height:0%; opacity: 0;}
    70%{opacity: 1;}
    99%{}
    100% {height:100%; opacity: 1;}
}

$unit-intervals: (
	'px': 1, 
	'em': 0.01, 
	'rem': 0.1
) !default;
$breakpoints: (
    phone:640px,
    tablet: 768px,
    desktop: 1024px)
    !default;
$media-expressions: (
    'screen': 'screen', 
    'print': 'print', 
    'handheld': 'handheld',
    'retina2x': (
        '(-webkit-min-device-pixel-ratio: 2)', 
        '(min-resolution: 192dpi)'
    ), 
    'retina3x': (
        '(-webkit-min-device-pixel-ratio: 3)', 
        '(min-resolution: 350dpi)'
    )
) !default;
@mixin media($conditions...) {
    @for $i from 1 through length($conditions) {
        $conditions: set-nth($conditions, $i, parse-expression(nth($conditions, $i)));
    }

    $branches: get-query-branches($conditions);
    $query: '';

    @each $branch in $branches {
        @if (str-length($query) != 0) {
        $query: $query + ', ';
        }

        $query: $query + $branch;
    }

    @media #{$query} {
        @content;
    }
}
@function get-query-branches($expressions) {
    $result: '';
    $has-groups: false;

    // Getting initial snapshot and looking for groups
    @each $expression in $expressions {
        @if (str-length($result) != 0) {
        $result: $result + ' and ';
        }

        @if (type-of($expression) == 'string') {
        $result: $result + $expression;
        } @else if (type-of($expression) == 'list') {
        $result: $result + nth($expression, 1);
        $has-groups: true;
        } @else {
        @warn '#{$expression} is not a valid expression.';
        }
    }

    // If we have groups, we have to create all possible combinations
    @if $has-groups {
        @each $expression in $expressions {
        @if (type-of($expression) == 'list') {
            $first: nth($expression, 1);

            @each $member in $expression {
            @if ($member != $first) {
                @each $partial in $result {
                $result: join($result, str-replace-first($first, $member, $partial));
                }
            }
            }
        }
        }
    }

    @return $result;
}
@function parse-expression($expression) {
    $operator: '';
    $value: '';
    $element: '';
    $result: '';
    $is-width: true;

    @if (type-of($expression) != 'string') {
        @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';
    }

    // Separating the operator from the rest of the expression
    @if (str-slice($expression, 2, 2) == '=') {
        $operator: str-slice($expression, 1, 2);
        $value: str-slice($expression, 3);
    } @else {
        $operator: str-slice($expression, 1, 1);
        $value: str-slice($expression, 2);
    }

    // Checking what type of expression we're dealing with
    @if map-has-key($breakpoints, $value) {
        $result: map-get($breakpoints, $value);
    } @else if map-has-key($media-expressions, $expression) {
        $result: map-get($media-expressions, $expression);
        $is-width: false;
    } @else {
        $result: to-number($value);
    }

    @if ($is-width) {
        $unit: unit($result);
        $interval: 0;
        
        @if (map-has-key($unit-intervals, $unit)) {
        $interval: map-get($unit-intervals, $unit);
        } @else {
        @warn 'Unknown unit: #{$unit}';
        } 
            
        @if ($operator == '>') {
        $element: '(min-width: #{$result + $interval})';
        } @else if ($operator == '<') {
        $element: '(max-width: #{$result - $interval})';
        } @else if ($operator == '>=') {
        $element: '(min-width: #{$result})';
        } @else if ($operator == '<=') {
        $element: '(max-width: #{$result})';
        } @else {
        @warn '#{$expression} is missing an operator.';
        }
    } @else {
        $element: $result;
    }

    @return $element;
}
@function str-replace-first($search, $replace, $subject) {
    $search-start: str-index($subject, $search);

    @if $search-start == null {
        @return $subject;
    }

    $result: str-slice($subject, 0, $search-start - 1);
    $result: $result + $replace;
    $result: $result + str-slice($subject, $search-start + str-length($search));

    @return $result;
}
@function to-number($string) {
    // Matrices
    $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
    $numbers:  0   1   2   3   4   5   6   7   8   9;
    
    // Result
    $result: 0;
    $divider: 0;
    $minus: false;
  
    // Looping through all characters
    @for $i from 1 through str-length($string) {
      $character: str-slice($string, $i, $i);
      $index: index($strings, $character);
      
    
      @if $character == '-' {
        $minus: true;
      }
      
      @else if $character == '.' {
        $divider: 1;
      }
      
      @else {
        @if type-of($index) != 'number' {
          $result: if($minus, $result * -1, $result);
          @return _length($result, str-slice($string, $i));
        }
  
        $number: nth($numbers, $index);
        
        @if $divider == 0 {
          $result: $result * 10;
        }
        
        @else {
          // Move the decimal dot to the left
          $divider: $divider * 10;
          $number: $number / $divider;
        }
        
        $result: $result + $number;
      }
    }
    
    @return if($minus, $result * -1, $result);
}
@function _length($number, $unit) {
    $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';
    $units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;
    $index: index($strings, $unit);

    @if type-of($index) != 'number' {
        @warn 'Unknown unit `#{$unit}`.';
        @return false;
    }

    @return $number * nth($units, $index);
}

html,body{
    min-height: 100%;
    min-width: 100%;
    margin: 0;
    padding: 0;
    background: #27282c;
}

header{
    display: flex;
    height: 50px;
    width: 100%;
    border-bottom: solid 1px red;
    position: static;
}

.body-content{
    height: calc(100% - 50px);
    width: 100%;

    .top-bar{
        display: flex;
        box-sizing: border-box;
        height: 50px;
        width: 100%;
        align-items: center;
        padding-left: 70px;
        
        span{
            &:first-of-type{
                font-family: roboto,sans-serif;
                font-weight: 500;
                font-size: 20px;
                color: #fff;
            }
            &:last-of-type{
                font-family: roboto,sans-serif;
                font-weight: 300;
                font-size: 20px;
                color: $highlight;
                margin-left: 5px;
            }
        }
    }

    .body-content-main{
        height: calc(100% - 50px);
        box-sizing: border-box;
        padding: 0px 50px;
        width: 100%;
        font-size: 0;

        .filter-window{
            display: inline-flex;
            width: 650px;
            height: 100%;
            vertical-align: top;
        }
        
        .gallery-window{
            display: inline-flex;
            width: calc(100% - 650px);
            height: 100%;
            vertical-align: top;
            padding-left: 40px;
            box-sizing: border-box;
            justify-content: center;
        }
        .gallery-grid{
            display: flex;
            flex-wrap: wrap;
            width: calc(100% - 20px);
            height: 100%;
            grid-gap: 12px;

            grid-template-columns: repeat(5,1fr);

            
            @media (max-width: 1700px){
                &{
                    grid-template-columns: repeat(4,1fr);
                }
            }
            @media (max-width: 1400px){
                &{
                    grid-template-columns: repeat(3,1fr);
                }
            }
            @media (max-width: 1200px){
                &{
                    grid-template-columns: repeat(2,1fr);
                }
            }

            .gallery-grid-item{
                display: inline-flex;
                margin: 0;
                min-width: 120px;
                max-width: 230px;
                min-height: 200px;

                a{
                    display: block;
                    position: relative;
                    border-radius: 8px;
                    overflow: hidden;
                    img{
                        width: 100%;
                        height: auto;
                        min-width: 135px;
                        vertical-align: middle;
                        z-index: 0;
                    }
                }
            }
        }
    }
}

.s-filter-form{
    font-family: roboto,sans-serif;
    width: 100%;
    padding: 0 20px;
    .top{
        display: flex;
        position: relative;
        .left{
            font-family: roboto,sans-serif;
            color: #bbb;
            vertical-align: top;
            display: inline-flex;
            flex-wrap: wrap;
            height: 100%;
            width: 50%;
            justify-content: center;
        }
        .right{
            font-size: 14px;
            vertical-align: top;
            display: inline-flex;
            height: 100%;
            width: 50%;
            justify-content: center;
        }
    }
    .bottom{
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        width: 100%;
        height: 50px;
        .filter-button{
            width: 48%;
            text-transform: uppercase;
            background: none;
            color: $highlight;
            border-radius: 5px;
            font-family: roboto,sans-serif;
            font-size: 15px;
            font-weight: 500;
            letter-spacing: 1px;
            padding: 0px 10px;
            border: solid 2px $highlight;
            outline: none;
            transition: all .2s;

            &:hover{
                background: hsla(0,0%,50%,.15);
            }
            &:active{
                background: hsla(0,0%,50%,.55);
                border: solid 2px $highlight;
            }
        }
    }

    .filter-search-container{
        display: flex;
        margin: 10px 0px;
        position: relative;
        height: 35px;
        width: 100%;
        label{
            position: relative;
            display: flex;
            align-items: center;
            .filter-search-box,.filter-search-box-number{
                box-sizing: border-box;
                width: 100%;
                background: #1e1f23;
                color: #efefef;
                height: 35px;
                padding: 5px 10px;
                font-size: 14px;
                border: none;
                outline: none;
                &.filter-search-box{
                    padding-right: 35px;
                }
                &.filter-search-box-number{
                    width: 70px;
                    appearance: none;
                    margin: 0px 0px 0px 10px;
                    -moz-appearance: textfield;
                }
            }
            
            .filter-search-icon{
                vertical-align: top;
                position: absolute;
                width: 24px;
                right: 6px;
                top: 2px;
            }
        }
    }

    
    .filter-search-label{
        text-transform: uppercase;
        font-size: 16px;
        font-family: roboto,sans-serif;
        font-style: italic;
        font-weight: 300;
        color: $highlight;
    }

    .filter-option-container{
        display: flex;
        flex-wrap: wrap;
        margin: 10px 0px;
        position: relative;
        width: 100%;
        font-size: 14px;
        span{
            width: 100%;
        }
    }
    
    .filter-fieldset-container{
        display: flex;
        margin: 10px 0px;
        position: relative;
        width: 100%;
        font-size: 14px;
        fieldset{
            border: 0;
            padding-left: 0;
            margin: 0;

            label{
                display: flex;
                margin: 2px 0px;
            }

            
            &#job-fieldset{
                label{
                    display: inline-flex;
                    input.job-hidden-checkbox{
                        display: none;
                    }
                    img{
                        opacity: .2;
                    }
                }
            }

            &#equip-fieldset{
                width: 100%;
                padding: 0;
                span{
                    color: #7a7a7a;
                }
                label{
                    input{
                        box-sizing: border-box;
                        width: 100%;
                        height: 42px;
                        background: #1e1f23;
                        color: #efefef;
                        padding: 0px 10px;
                        font-size: 14px;
                        border: none;
                        outline: none;
                    }
                }
            }
        }
    }


}
